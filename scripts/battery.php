<?php

const TELEGRAM_API_TOKEN = '–í–∞—à_Telegram_API_Token';
const CHAT_ID = '–í–∞—à_Chat_ID';

function readBatteryInfo($param)
{
    $path = "/sys/class/power_supply/battery/{$param}";

    return is_readable($path) ? trim(@file_get_contents($path)) : null;
}

function getBatteryStatus()
{
    $batteryInfo = [
        'percentage' => readBatteryInfo('capacity'),
        'status' => readBatteryInfo('status'),
        'temperature' => readBatteryInfo('temp'),
        'plugged' => readBatteryInfo('charge_type'),
        'health' => readBatteryInfo('health'),
        'current' => readBatteryInfo('current_now'),
    ];

    if (in_array(null, $batteryInfo, true)) {
        return null;
    }

    $batteryInfo['temperature'] = (float) $batteryInfo['temperature'] / 10;

    return $batteryInfo;
}

function formatBatteryMessage($battery)
{
    $pluggedMap = [
        'AC' => '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∑–∞—Ä—è–¥–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é',
        'USB' => '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ USB',
        'Wireless' => '–ë–µ–∑–¥—Ä–æ—Ç–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞',
        'Fast' => '–®–≤–∏–¥–∫–∞ –∑–∞—Ä—è–¥–∫–∞',
        'N/A' => '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ',
    ];
    $statusMap = [
        'Charging' => '–ó–∞—Ä—è–¥–∂–∞—î—Ç—å—Å—è',
        'Discharging' => '–†–æ–∑—Ä—è–¥–∂–∞—î—Ç—å—Å—è',
        'Full' => '–ó–∞—Ä—è–¥ –ø–æ–≤–Ω–∏–π',
        'Not charging' => '–ù–µ –∑–∞—Ä—è–¥–∂–∞—î—Ç—å—Å—è',
    ];
    $healthMap = [
        'Good' => '–•–æ—Ä–æ—à–∏–π —Å—Ç–∞–Ω',
        'Overheat' => '–ü–µ—Ä–µ–≥—Ä—ñ–≤',
        'Dead' => '–í–º–µ—Ä–ª–∞ –±–∞—Ç–∞—Ä–µ—è',
        'Unspecified' => '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ',
    ];

    return "üîã –°—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ—ó:\n" .
        "‚Ä¢ –†—ñ–≤–µ–Ω—å –∑–∞—Ä—è–¥—É: {$battery['percentage']}%\n" .
        "‚Ä¢ –°—Ç–∞–Ω –∑–∞—Ä—è–¥–∫–∏: " . ($pluggedMap[$battery['plugged']] ?? "–ù–µ–≤—ñ–¥–æ–º–æ") . "\n" .
        "‚Ä¢ –°—Ç–∞—Ç—É—Å: " . ($statusMap[$battery['status']] ?? "–ù–µ–≤—ñ–¥–æ–º–æ") . "\n" .
        "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " . round($battery['temperature'], 1) . "¬∞C\n" .
        "‚Ä¢ –ó–¥–æ—Ä–æ–≤'—è: " . ($healthMap[$battery['health']] ?? "–ù–µ–≤—ñ–¥–æ–º–æ") . "\n" .
        "‚Ä¢ –°—Ç—Ä—É–º: {$battery['current']} ¬µA\n";
}

function sendTelegramRequest($method, $data)
{
    $url = 'https://api.telegram.org/bot' . TELEGRAM_API_TOKEN . "/$method";
    $ch = curl_init($url);
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $data,
    ]);
    $response = curl_exec($ch);
    if (false === $response) {
        echo 'cURL Error: ' . curl_error($ch) . PHP_EOL;
    }
    curl_close($ch);

    return json_decode($response, true);
}

function sendToTelegram($message)
{
    $data = [
        'chat_id' => CHAT_ID,
        'text' => $message,
        'reply_markup' => json_encode([
            'inline_keyboard' => [[['text' => 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ', 'callback_data' => 'refresh_battery']]],
        ]),
    ];
    sendTelegramRequest('sendMessage', $data);
}

function getUpdates($offset)
{
    return sendTelegramRequest('getUpdates', ['offset' => $offset, 'timeout' => 10]);
}

function answerCallbackQuery($callbackQueryId, $text)
{
    sendTelegramRequest('answerCallbackQuery', [
        'callback_query_id' => $callbackQueryId,
        'text' => $text,
    ]);
}

// –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
if ($battery = getBatteryStatus()) {
    sendToTelegram(formatBatteryMessage($battery));
}

$lastUpdateId = 0;
while (true) {
    $updates = getUpdates($lastUpdateId + 1);
    if ($updates && isset($updates['result'])) {
        foreach ($updates['result'] as $update) {
            $lastUpdateId = $update['update_id'];
            if (! empty($update['callback_query']) && 'refresh_battery' === $update['callback_query']['data']) {
                if ($battery = getBatteryStatus()) {
                    sendToTelegram(formatBatteryMessage($battery));
                    answerCallbackQuery($update['callback_query']['id'], '–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
                }
            }
        }
    }

    // –©–æ–≥–æ–¥–∏–Ω–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    if ('00' === date('i')) {
        if ($battery = getBatteryStatus()) {
            sendToTelegram(formatBatteryMessage($battery));
        }
        sleep(60);
    }
    sleep(1);
}
